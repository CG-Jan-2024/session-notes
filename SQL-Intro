Database
	- uses client / server architecture
	- client here could be a CLI(Command Line Interface) or a GUI(Grphical User Interface) client
	- can use pgAdmin as GUI client for postgres

things a client needs to know to contact the server
---------------------------------------------------
1) network
2) ipaddress of the server
3) port number of the server program
4) protocol
5) credentials (username/password)


server could be
	- web server - http(hyper text transfer protocol)
	- database server
	- file server - ftp (file transfer protocol)

port number
	- generally a 4 digit number
	- tomcat web server - 8080
	- weblogic web server - 7001
	- postgres DB server - 5432
	- angular live development server - 4200
	-

data is stored in the database server - wrong

data is stored by the database server - right


data
	- organized
		- relational DB model
			- tables, rows(records), columns(fields)
			- eg. postgres, mysql, oracle
		- no sql model
			- eg. mongoDB
	- manipulate
		- adding, deleting, modifying

SQL - Structured Querying Language

ANSII SQL - this a standard/specification proposed for SQL

most DB softwares follow this ANSII SQL

Postgres

Like all Languages , SQL is also compiled and executed

steps in executing a query
--------------------------
1) we type the query in the client program
2) once enter is pressed, the query is sent to the server
3) the server takes the request(query), processes the query(compiles and executes) the query
4) the server sends the reponse(output of the query) to the client
5) we see the output of the query on the client

SQL categories
--------------
1) DDL - Data Definition Language
		- here queries are related to the structure of the table
			- CREATE, ALTER, DROP
2) DML - Data Manipulation Language
		- here queries are related to the data in the table
			- INSERT, UPDATE, DELETE
3) DQL - Data Querying Language
		- to fetch data
			- SELECT
				- where, group by, having
4) DCL - Data Control Language
		- CREATE users
		- GRANT, REVOKE
5) TCL - Transaction Control Language
		- COMIT, ROLLBACK

joins
Normalization
Transaction - ACID properties
Constraints - Primary key, foreign key, unique, not null etc

connecting to postgres server through cli client - psql
------------------------------------------------------
1) open cmd
2) navigate to bin folder of postgres installation
3) then type the command 
	psql --host=localhost --port=5433 --username=postgres --password



commands/queries used
----------------------

1) \l - to list all the databases
2) CREATE DATABASE <databasename> - to create a new database
3) \connect <database name> - to switch to another database
4) \dt - to list all the tables
5) CREATE TABLE user_details(user_id INT, user_name VARCHAR(20), user_password VARCHAR(20));
6) INSERT INTO user_details(user_id, user_name, user_password) VALUES(1, 'abc', 'xyz');
7) INSERT INTO user_details VALUES(2, 'lmn', 'asd');


constraints
-----------
	- a condition put up on the column
	- whenever we insert/update data, the data will be checked against the condition

primary key
-------------
	- according boyce codd, every table should have a primary key column
	- a column marked as primary key does not allow null values and duplicate values
	- a primary key column will always help us to fetch a unique record
	- primary key can be specified at column level or table level
	- a primary key column is automatically indexed

unique
not null

foreign key
-----------
	- enforces referential intergrity
	- can one table have more than one foreign key ? - yes
	- can i have a foreign key referencing a column in the same table? -yes

department_details
dept_id(PK)
dept_name

employee_details
emp_id(PK)
emp_name
dept_id(FK)	------> refernces dept_id of department_details
manager_id(FK) ----> refernces emp_id of employee_details

501 HR
502 IT
503 Admin

101 John 501
102 Smith 503
103 Priya 501
104 Preethi 515 ----> incorrect data

functions
---------
	- we have in-built function
	- these functions are of 2 types
		- scalar functions
			- a scalar function works on each data in the column and produces corresponding output
			- eg, UPPER(), DATE_PART()
		- aggregate functions
			- an aggregate function works on all the data of the column and produces one output
			- AVG(), COUNT(), SUM()

clauses of select query 
-----------------------
SELECT <projecttion columns>
	FROM <table(s) name>
	WHERE <condition>
	GROUP BY <column list>
	HAVING <condition>
	ORDER BY <column list>
	
count of the total employees workin
   	select count(*) from employee_details;
count of total employess in each department
	select count(emp_id) from employee_details group by emp_dept_id;
	select emp_dept_id, count(emp_id) from employee_details group by emp_dept_id;
average salary of all the employees
	select avg(emp_salary) from employee_details;
average salary of all the employees in each department
	select avg(emp_salary) from employee_details group by emp_dept_id;
average salary of all the employees in each department whose average salary is greater than 32500
	select avg(emp_salary) from employee_details group by emp_dept_id having avg(emp_salary)>32500;

where clause applies the condition before the groupimg
having clause applies the condition after grouping


joins
------

query to display employee information
	select ^ from employee_details;
query to display employee information and the department name which the employee belongs to


tableA join tableB

Set1 = (A, B, C)  
Set2 = (X,Y)
Set1 X Set2 = (A,X) (A, Y) (B,X) (B, Y) (C,X) (C,Y)


theta style of joins (old style)
SELECT emp_id, emp_name, emp_dept_id, dept_name FROM employee_details, department_details where emp_dept_id=dept_id;

join keyword (new style)
SELECT emp_id, emp_name, emp_dept_id, dept_name FROM employee_details INNER JOIN department_details ON emp_dept_id=dept_id;


types of joins
---------------
INNER JOIN
LEFT OUTTER JOIN
RIGHT OUTTER JOIN
FULL OUTTER JOIN
CROSS JOIN
SELF JOIN
NATURAL JOIN 

Subquery
--------
write a query to display employee info of employees whose salary is lesser than the average salary of all the employees 






